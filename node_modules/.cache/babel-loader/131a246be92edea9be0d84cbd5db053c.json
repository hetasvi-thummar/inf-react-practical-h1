{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { Config } from \"../../common\";\nexport const loginData = data => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGIN_DATA_PENDING\"\n    });\n    axios.post(`${Config.apiUrl}/test/login`, data, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    }).then(res => {\n      localStorage.setItem(\"jwt\", res.data.results.user.token);\n      dispatch({\n        type: \"LOGIN_DATA_SUCCESS\"\n      });\n      toast.success(\"successfully login\");\n    }).catch(error => {\n      dispatch({\n        type: \"LOGIN_DATA_FAILURE\",\n        message: error.message\n      });\n      toast.error(error.response.data.message[0]);\n    });\n  };\n};\nexport const registerData = registerdata => {\n  return dispatch => {\n    dispatch({\n      type: \"REGISTER_DATA_PENDING\"\n    });\n    axios.post(`${Config.apiUrl}/test/register`, registerdata).then(res => {\n      dispatch({\n        type: \"REGISTER_DATA_SUCCESS\"\n      });\n      toast.success(\"successfully register\");\n    }).catch(error => {\n      dispatch({\n        type: \"REGISTER_DATA_FAILURE\",\n        message: error.message\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/var/www/html/working folder/inf-react-practical-h1/src/redux/actions/AuthAction.js"],"names":["axios","toast","Config","loginData","data","dispatch","type","post","apiUrl","headers","Authorization","jwt","then","res","localStorage","setItem","results","user","token","success","catch","error","message","response","registerData","registerdata"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAU;AACjC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAN,IAAAA,KAAK,CACFO,IADH,CACS,GAAEL,MAAM,CAACM,MAAO,aADzB,EACuCJ,IADvC,EAC6C;AACzCK,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASC,GAAI;AADtB;AADgC,KAD7C,EAOGC,IAPH,CAOSC,GAAD,IAAS;AACbC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BF,GAAG,CAACT,IAAJ,CAASY,OAAT,CAAiBC,IAAjB,CAAsBC,KAAlD;AACAb,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE;AADC,OAAD,CAAR;AAIAL,MAAAA,KAAK,CAACkB,OAAN,CAAc,oBAAd;AACD,KAdH,EAgBGC,KAhBH,CAgBUC,KAAD,IAAW;AAChBhB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,oBADC;AAEPgB,QAAAA,OAAO,EAAED,KAAK,CAACC;AAFR,OAAD,CAAR;AAKArB,MAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACE,QAAN,CAAenB,IAAf,CAAoBkB,OAApB,CAA4B,CAA5B,CAAZ;AACD,KAvBH;AAwBD,GA1BD;AA2BD,CA5BM;AA8BP,OAAO,MAAME,YAAY,GAAIC,YAAD,IAAkB;AAC5C,SAAQpB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAN,IAAAA,KAAK,CACFO,IADH,CACS,GAAEL,MAAM,CAACM,MAAO,gBADzB,EAC0CiB,YAD1C,EAGGb,IAHH,CAGSC,GAAD,IAAS;AACbR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE;AADC,OAAD,CAAR;AAIAL,MAAAA,KAAK,CAACkB,OAAN,CAAc,uBAAd;AACD,KATH,EAWGC,KAXH,CAWUC,KAAD,IAAW;AAChBhB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,uBADC;AAEPgB,QAAAA,OAAO,EAAED,KAAK,CAACC;AAFR,OAAD,CAAR;AAID,KAhBH;AAiBD,GAnBD;AAoBD,CArBM","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { Config } from \"../../common\";\n\nexport const loginData = (data) => {\n  return (dispatch) => {\n    dispatch({ type: \"LOGIN_DATA_PENDING\" });\n    axios\n      .post(`${Config.apiUrl}/test/login`, data, {\n        headers: {\n          Authorization: `Bearer ${jwt}`,\n        },\n      })\n\n      .then((res) => {\n        localStorage.setItem(\"jwt\", res.data.results.user.token);\n        dispatch({\n          type: \"LOGIN_DATA_SUCCESS\",\n        });\n\n        toast.success(\"successfully login\");\n      })\n\n      .catch((error) => {\n        dispatch({\n          type: \"LOGIN_DATA_FAILURE\",\n          message: error.message,\n        });\n\n        toast.error(error.response.data.message[0]);\n      });\n  };\n};\n\nexport const registerData = (registerdata) => {\n  return (dispatch) => {\n    dispatch({ type: \"REGISTER_DATA_PENDING\" });\n    axios\n      .post(`${Config.apiUrl}/test/register`, registerdata)\n\n      .then((res) => {\n        dispatch({\n          type: \"REGISTER_DATA_SUCCESS\",\n        });\n\n        toast.success(\"successfully register\");\n      })\n\n      .catch((error) => {\n        dispatch({\n          type: \"REGISTER_DATA_FAILURE\",\n          message: error.message,\n        });\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}